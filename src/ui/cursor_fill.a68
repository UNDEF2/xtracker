	.include	"xbase/memmap.inc"
	.section	.text
#
# void cursor_fill_sub(uint16_t w, uint16_t h, uint16_t val);
#
	.global	cursor_fill_sub
cursor_fill_sub:
.set	SPID, 4+(3*2)
.set	ARG_W, SPID+(0*4)+2
.set	ARG_H, SPID+(1*4)+2
.set	ARG_VAL, SPID+(2*4)+2
	movem.w	d2-d4, -(sp)
	lea	XB_PCG_BG1_NAME, a0
	/* Row displacement has w subtracted */
	move.w	#(512/8)*2, d2
	move.w	ARG_W(sp), d3
	beq	done  /* Nope out for w=0 */
	sub.w	d3, d2
	sub.w	d3, d2
	move.w	d2, a1  /* a1 holds effective row offset  */

	/* Value to be drawn is in d0 */
	move.w	ARG_VAL(sp), d0

	/* Outer loop counter */
	move.w	ARG_H(sp), d1
	beq	done  /* nope out */
	subq.w	#1, d1

	/* d4 takes ARG_W / 8 */
	move.w	d3, d4
	asr.w	#3, d4

	/* d3 takes 2 * (7 - (ARG_W % 8)) */
	andi.w	#0x07, d2
	move.w	#7, d3
	sub.w	d2, d3
	add.w	d3, d3

outer_y:
	move.w	d4, d2  /* load major X counter */
	/* Jump table for minor */
	jmp	inner_x(pc, d3.w)
inner_x:
	.rept	8
	move.w	d0, (a0)+
	.endr
	dbf	d2, inner_x

	/* Next line */
	adda.w	a1, a0
	dbf	d1, outer_y

done:
	movem.w	(sp)+, d2-d4
	rts


old_shit:
	/* d3 takes ARG_W - 1 */
	subq.w	#1, d3

outer_y2:
	move.w	d3, d2  /* load X counter */
inner_x2:
	move.w	d0, (a0)+
	dbf	d2, inner_x2

	/* Next line */
	adda.w	a1, a0
	dbf	d1, outer_y2

	bra	done
