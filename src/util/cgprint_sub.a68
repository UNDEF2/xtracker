	.include	"xbase/memmap.inc"
	.section	.text

.set	CGPRINT_TILE_W, 8
.set	CGPRINT_TILE_H, 8

.set	CGPRINT_CHAR_W, 6
.set	CGPRINT_CHAR_H, 8

#
# void cgprint_string_sub(const uint8_t *cgdat, volatile uint16_t *dest_addr,
#                         const char *str, uint16_t attr);
#
	.global	cgprint_string_sub
cgprint_string_sub:
.set	SPID, 4+(2*4)
.set	ARG_CGDAT, SPID+(0*4)
.set	ARG_DEST_ADDR, SPID+(1*4)
.set	ARG_STR, SPID+(2*4)
.set	ARG_ATTR, SPID+(3*4)+2
	movem.l	a2-a3, -(sp)
	move.l	ARG_STR(sp), a0
	move.l	ARG_DEST_ADDR(sp), a1
	move.l	ARG_CGDAT(sp), a2
	move.w	ARG_ATTR(sp), d1
	andi.w	#0x00FF, d1

str_copy_top:
	moveq	#0, d0
	move.b	(a0)+, d0
	beq	str_done
	/* Multiply d0 by 64 to get tile index */
	lsl.l	#6, d0
	lea	(a2, d0.l), a3

		.rept	CGPRINT_CHAR_H

			/* Draw horizontal pixels from the tile */
			.rept	CGPRINT_CHAR_W
			move.b	(a3)+, d0
			beq	9f  /* Skip transparent pixels */
			move.w	d1, (a1)+
			bra	8f
9:
			addq	#2, a1
8:
			.endr  /* CGPRINT_CHAR_W */

		/* Next row */
		addq	#2, a3  /* Skip unused 2px from tile */
		adda.w	#((512 - CGPRINT_CHAR_W) * 2).l, a1

		.endr  /* CGPRINT_CHAR_H */

	suba.w	#(((CGPRINT_CHAR_H * 512) - CGPRINT_CHAR_W) * 2).l, a1

	bra	str_copy_top

	rts

str_done:
	movem.l	(sp)+, a2-a3
	rts

#
# void cgprint_string_noalpha_sub(const uint8_t *cgdat, volatile uint16_t *dest_addr,
#                                 const char *str, uint32_t colors);
#
	.global	cgprint_string_noalpha_sub
cgprint_string_noalpha_sub:
.set	SPID, 4+(3*4)
.set	ARG_CGDAT, SPID+(0*4)
.set	ARG_DEST_ADDR, SPID+(1*4)
.set	ARG_STR, SPID+(2*4)
.set	ARG_COLORS, SPID+(3*4)
	movem.l	d2/a2-a3, -(sp)
	move.l	ARG_STR(sp), a0
	move.l	ARG_DEST_ADDR(sp), a1
	move.l	ARG_CGDAT(sp), a2
	move.w	ARG_COLORS+2(sp), d1
	andi.w	#0x00FF, d1
	move.w	ARG_COLORS(sp), d2
	andi.w	#0x00FF, d2

str_copy_top_noa:
	moveq	#0, d0
	move.b	(a0)+, d0
	beq	str_done_noa
	/* Multiply d0 by 64 to get tile index */
	lsl.l	#6, d0
	lea	(a2, d0.l), a3

		.rept	CGPRINT_CHAR_H

			/* Draw horizontal pixels from the tile */
			.rept	CGPRINT_CHAR_W
			move.b	(a3)+, d0
			bne	9f

			/* Translucent case */
			move.w	d2, (a1)+
			bra	8f
9:			/* Opaque case */
			move.w	d1, (a1)+
8:
			.endr  /* CGPRINT_CHAR_W */

		/* Next row */
		addq	#2, a3  /* Skip unused 2px from tile */
		adda.w	#((512 - CGPRINT_CHAR_W) * 2).l, a1

		.endr  /* CGPRINT_CHAR_H */

	suba.w	#(((CGPRINT_CHAR_H * 512) - CGPRINT_CHAR_W) * 2).l, a1

	bra	str_copy_top_noa

	rts

str_done_noa:
	movem.l	(sp)+, d2/a2-a3
	rts

#
# void cgprint_8x8_sub(const uint8_t *src_addr, volatile uint16_t *dest_addr,
#                      uint16_t w, uint16_t h);
#
	.global	cgprint_8x8_sub
cgprint_8x8_sub:
.set	SPID, 4+(2*2)
.set	ARG_SRC_ADDR, SPID+(0*4)
.set	ARG_DEST_ADDR, SPID+(1*4)
.set	ARG_W, SPID+(2*4)+2
.set	ARG_H, SPID+(3*4)+2
	movem.w	d2/d7, -(sp)

	/* a0 := src, a1 := dest */
	move.l	ARG_SRC_ADDR(sp), a0
	move.l	ARG_DEST_ADDR(sp), a1

	/* Inner counter */
	move.w	ARG_W(sp), d1
	beq	9f
	subq	#1, d1
	move.w	d1, d2  /* backup for counter */
	/* Outer counter */
	move.w	ARG_H(sp), d7
	beq	9f
	subq	#1, d7

	moveq	#0, d0

tile_h_outer:
	move.l	a1, -(sp)
	move.w	d2, d1
tile_w_inner:

	/* Draw an 8x8 tile from a0 to CG plane at a1 */
	.rept	CGPRINT_TILE_H
	/* Draw horizontal pixels from the tile */
	.rept	CGPRINT_TILE_W / 4
	move.l	(a0)+, d0
	movep.l	d0, 1(a1)
	addq	#8, a1
	.endr  /* CGPRINT_TILE_W */

	/* Next row */
	adda.w	#((512 - CGPRINT_TILE_W) * 2).l, a1
	.endr  /* CGPRINT_TILE_H */

	/* Move back up to where we started, and then 8px to the right */
	suba.w	#(((CGPRINT_TILE_H * 512) - CGPRINT_TILE_W) * 2).l, a1

	dbf	d1, tile_w_inner


	/* With a row of tiles done, move a1 back and move down a line */
	move.l	(sp)+, a1
	adda.w	#((CGPRINT_TILE_H * 512) * 2).l, a1

	dbf	d7, tile_h_outer

9:
	movem.w	(sp)+, d2/d7
	rts

#
# void cgprint_line_fill_sub(volatile uint16_t *dest_addr, uint8_t val,
#                            uint16_t w);
#
	.global	cgprint_line_fill_sub
cgprint_line_fill_sub:
.set	SPID, 4+(0*0)
.set	ARG_DEST_ADDR, SPID+(0*4)
.set	ARG_VAL, SPID+(1*4)+3
.set	ARG_W, SPID+(2*4)+2
	move.l	ARG_DEST_ADDR(sp), a0

	/* Fill d0 with 4px dupes of the 8-bit value */
	moveq	#0, d0
	move.b	ARG_VAL(sp), d0
	move.w	d0, d1
	swap	d1
	move.w	d0, d1
	move.l	d1, d0
	lsl.l	#8, d1
	or.l	d1, d0

# Check for common width divisions as minor optimization
	move.w	ARG_W(sp), d1
	andi.b	#0x0F, d1
	beq	line_copy_div16
	move.w	ARG_W(sp), d1
	andi.b	#0x07, d1
	beq	line_copy_div8
	move.w	ARG_W(sp), d1
	andi.b	#0x03, d1
	beq	line_copy_div4
	move.w	ARG_W(sp), d1
	andi.b	#0x01, d1
	beq	line_copy_div2

# Simple, slowest
line_copy_nodiv:
	move.w	ARG_W(sp), d1
	subq.w	#1, d1
line_copy_top0:
	move.w	d0, (a0)+
	dbf	d1, line_copy_top0
	rts

# Two pixels at once
line_copy_div2:
	move.w	ARG_W(sp), d1
	asr.w	#1, d1
	subq.w	#1, d1
line_copy_top2:
	movep.w	d0, 1(a0)
	addq.l	#4, a0
	dbf	d1, line_copy_top2
	rts

line_copy_div4:
	move.w	ARG_W(sp), d1
	asr.w	#2, d1
	subq.w	#1, d1
line_copy_top4:
	movep.l	d0, 1(a0)
	lea	8(a0), a0
	dbf	d1, line_copy_top4
	rts

line_copy_div8:
	move.w	ARG_W(sp), d1
	asr.w	#3, d1
	subq.w	#1, d1
line_copy_top8:
	movep.l	d0, 1(a0)
	movep.l	d0, 9(a0)
	lea	16(a0), a0
	dbf	d1, line_copy_top8
	rts

line_copy_div16:
	move.w	ARG_W(sp), d1
	asr.w	#4, d1
	subq.w	#1, d1
line_copy_top16:
	movep.l	d0, 1(a0)
	movep.l	d0, 9(a0)
	movep.l	d0, 17(a0)
	movep.l	d0, 25(a0)
	lea	32(a0), a0
	dbf	d1, line_copy_top16
	rts
